<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>io.ninja.park</groupId>
	<artifactId>ninja-park</artifactId>
	<version>1.0.0.SNAPSHOT</version>
	<name>ninja-park :: Project</name>
	<packaging>pom</packaging>

	<properties>
		<!-- 主要依赖库的版本定义 -->
		<springside.version>4.2.2.GA</springside.version>
		<spring-boot.version>1.5.4.RELEASE</spring-boot.version>
		<mybatis.version>3.4.2</mybatis.version>
		<mybatis-spring.version>1.3.0</mybatis-spring.version>
		<hystrix.version>1.3.16</hystrix.version>
		<hystrix-metrics-event-stream.version>1.1.2</hystrix-metrics-event-stream.version>
		<javasimon.version>3.4.0</javasimon.version>
		<guava.version>16.0.1</guava.version>
		<dozer.version>5.4.0</dozer.version>
		<junit.version>4.12</junit.version>
		<powermock.version>1.6.5</powermock.version>
		<nosqlunit.version>0.7.9</nosqlunit.version>
		<mina.version>2.0.9</mina.version>
		<netty.version>4.1.11.Final</netty.version>
		<dubbo.version>2.5.3</dubbo.version>
		<velocity.version>1.7</velocity.version>
		<velocity-tools.version>2.0</velocity-tools.version>
		<lucene.version>7.5.0</lucene.version>
		<zookeeper.version>3.3.6</zookeeper.version>
		<shiro.version>1.7.1</shiro.version>
		<curator.version>1.1.10</curator.version>
		<zkclient.version>0.1</zkclient.version>
		<dbunit.version>2.5.1</dbunit.version>
		<springtestdbunit.version>1.2.1</springtestdbunit.version>
		<commons-lang3.version>3.2.1</commons-lang3.version>
		<quartz.version>2.2.3</quartz.version>
		<!-- Plugin的属性 -->
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<java.version>1.8</java.version>
		<!-- 项目属性 -->
		<!-- <jdbc.driver.groupId>com.h2database</jdbc.driver.groupId> <jdbc.driver.artifactId>h2</jdbc.driver.artifactId> 
			<jdbc.driver.version>${h2.version}</jdbc.driver.version> -->

		<jdbc.driver.groupId>mysql</jdbc.driver.groupId>
		<jdbc.driver.artifactId>mysql-connector-java</jdbc.driver.artifactId>
		<jdbc.driver.version>5.1.22</jdbc.driver.version>
		<log4j2.version>2.3</log4j2.version>
	</properties>

	<prerequisites>
		<maven>3.0.0</maven>
	</prerequisites>

	<!-- 设定除中央仓库 (repo1.maven.org/maven2/)外的其他仓库,按设定顺序进行查询，如有Nexus私服, 取消注释并指向正确的服务器地址 
		<repositories> <repository> <id>nexus</id> <name>Team Nexus Repository</name> 
		<url>http://localhost:8081/nexus/content/groups/public</url> </repository> 
		</repositories> -->

	<!-- 如有Nexus私服, 取消注释并指向正确的服务器地址 <pluginRepositories> <pluginRepository> 
		<id>nexus</id> <name>Team Nexus Repository</name> <url>http://localhost:8081/nexus/content/groups/public</url> 
		<snapshots> <enabled>false</enabled> </snapshots> </pluginRepository> </pluginRepositories> -->

	<!-- 预定义依赖项的version,scope与exclusions,子项目中只需定义groupId 与 artifactId 即可 -->

	<modules>
		<module>ninja-park-common</module>
		<module>ninja-park-dao</module>
		<module>ninja-park-domain</module>
		<module>ninja-park-facade</module>
		<module>ninja-park-facade-impl</module>
		<module>ninja-park-manager</module>
		<module>ninja-park-remote</module>
		<module>ninja-park-service</module>
		<module>ninja-park-web</module>
		<module>ninja-park-worker</module>
	</modules>

	<dependencyManagement>
		<dependencies>
			<!-- spring boot -->
			<dependency>
				<!-- Import dependency management from Spring Boot -->
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-dependencies</artifactId>
				<version>${spring-boot.version}</version>
				<type>pom</type>
				<scope>import</scope>
			</dependency>
			<!-- SECURITY begin -->
			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-core</artifactId>
				<version>${shiro.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-spring</artifactId>
				<version>${shiro.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-web</artifactId>
				<version>${shiro.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.shiro</groupId>
				<artifactId>shiro-ehcache</artifactId>
				<version>${shiro.version}</version>
			</dependency>
			<!-- SECURITY end -->
			<!-- mybatis -->
			<dependency>
				<groupId>org.mybatis</groupId>
				<artifactId>mybatis</artifactId>
				<version>${mybatis.version}</version>
			</dependency>

			<dependency>
				<groupId>org.mybatis</groupId>
				<artifactId>mybatis-spring</artifactId>
				<version>${mybatis-spring.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.lucene</groupId>
				<artifactId>lucene-core</artifactId>
				<version>${lucene.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.lucene</groupId>
				<artifactId>lucene-analyzers-common</artifactId>
				<version>${lucene.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.lucene</groupId>
				<artifactId>lucene-analyzers-smartcn</artifactId>
				<version>${lucene.version}</version>
			</dependency>
			<dependency>
				<groupId>org.apache.lucene</groupId>
				<artifactId>lucene-queryparser</artifactId>
				<version>${lucene.version}</version>
			</dependency>
			<!-- SPRINGSIDE MODULES begin -->
			<dependency>
				<groupId>org.springside</groupId>
				<artifactId>springside-core</artifactId>
				<version>${springside.version}</version>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>org.springside</groupId>
				<artifactId>springside-extension</artifactId>
				<version>${springside.version}</version>
				<scope>compile</scope>
			</dependency>
			<dependency>
				<groupId>org.springside</groupId>
				<artifactId>springside-metrics</artifactId>
				<version>${springside.version}</version>
			</dependency>
			<!-- SPRINGSIDE MODULES end -->

			<!-- jdbc driver -->
			<dependency>
				<groupId>${jdbc.driver.groupId}</groupId>
				<artifactId>${jdbc.driver.artifactId}</artifactId>
				<version>${jdbc.driver.version}</version>
				<scope>runtime</scope>
			</dependency>
			<!-- PERSISTENCE end -->

			<!-- j2ee web spec -->
			<!-- update to servlet 3.0 for spring 4.0 MockHttpServletRequest -->
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>javax.servlet-api</artifactId>
				<version>3.1.0</version>
				<scope>provided</scope>
			</dependency>
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>jstl</artifactId>
				<version>1.2</version>
			</dependency>
			<dependency>
				<groupId>javax.servlet</groupId>
				<artifactId>jsp-api</artifactId>
				<version>2.0</version>
				<exclusions>
					<exclusion>
						<groupId>javax.servlet</groupId>
						<artifactId>javax.servlet-api</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<!-- WEB end -->

			<!-- hystrix begin -->
			<dependency>
				<groupId>com.netflix.hystrix</groupId>
				<artifactId>hystrix-core</artifactId>
				<version>${hystrix.version}</version>
				<exclusions>
					<exclusion>
						<groupId>commons-logging</groupId>
						<artifactId>commons-logging</artifactId>
					</exclusion>
				</exclusions>
			</dependency>
			<dependency>
				<groupId>com.netflix.hystrix</groupId>
				<artifactId>hystrix-metrics-event-stream</artifactId>
				<version>${hystrix-metrics-event-stream.version}</version>
			</dependency>
			<!-- hystrix end -->

			<!-- Monitor begin -->
			<!-- javasimon -->
			<dependency>
				<groupId>org.javasimon</groupId>
				<artifactId>javasimon-spring</artifactId>
				<version>${javasimon.version}</version>
			</dependency>
			<dependency>
				<groupId>org.javasimon</groupId>
				<artifactId>javasimon-jdbc4</artifactId>
				<version>${javasimon.version}</version>
			</dependency>
			<dependency>
				<groupId>org.javasimon</groupId>
				<artifactId>javasimon-console-embed</artifactId>
				<version>${javasimon.version}</version>
			</dependency>
			<!-- Monitor end -->

			<!-- google java library -->
			<dependency>
				<groupId>com.google.guava</groupId>
				<artifactId>guava</artifactId>
				<version>${guava.version}</version>
			</dependency>

			<!-- OTHER TOOLS begin -->
			<!-- pojo copy -->
			<dependency>
				<groupId>net.sf.dozer</groupId>
				<artifactId>dozer</artifactId>
				<version>${dozer.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.slf4j</groupId>
						<artifactId>slf4j-log4j12</artifactId>
					</exclusion>
				</exclusions>
			</dependency>

			<dependency>
				<groupId>org.dbunit</groupId>
				<artifactId>dbunit</artifactId>
				<version>${dbunit.version}</version>
				<scope>test</scope>
			</dependency>

			<dependency>
				<groupId>com.github.springtestdbunit</groupId>
				<artifactId>spring-test-dbunit</artifactId>
				<version>${springtestdbunit.version}</version>
				<scope>test</scope>
			</dependency>

			<!-- log4jdbc -->
			<dependency>
				<groupId>com.googlecode.log4jdbc</groupId>
				<artifactId>log4jdbc</artifactId>
				<version>1.2</version>
				<scope>runtime</scope>
			</dependency>

			<!-- mockito -->
			<dependency>
				<groupId>org.powermock</groupId>
				<artifactId>powermock-module-junit4</artifactId>
				<version>${powermock.version}</version>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.powermock</groupId>
				<artifactId>powermock-api-mockito</artifactId>
				<version>${powermock.version}</version>
				<scope>test</scope>
				<exclusions>
					<exclusion>
						<groupId>org.mockito</groupId>
						<artifactId>mockito-all</artifactId>
					</exclusion>
				</exclusions>
			</dependency>

			<!-- springside -->
			<dependency>
				<groupId>org.springside</groupId>
				<artifactId>springside-core</artifactId>
				<version>${springside.version}</version>
				<classifier>tests</classifier>
				<scope>test</scope>
			</dependency>
			<dependency>
				<groupId>org.springside</groupId>
				<artifactId>springside-extension</artifactId>
				<version>${springside.version}</version>
				<classifier>tests</classifier>
				<scope>test</scope>
			</dependency>

			<dependency>
				<groupId>com.alibaba</groupId>
				<artifactId>dubbo</artifactId>
				<version>${dubbo.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.springframework</groupId>
						<artifactId>spring</artifactId>
					</exclusion>
				</exclusions>
			</dependency>

			<dependency>
				<groupId>org.apache.mina</groupId>
				<artifactId>mina-core</artifactId>
				<version>${mina.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.velocity</groupId>
				<artifactId>velocity</artifactId>
				<version>${velocity.version}</version>
			</dependency>

			<dependency>
				<groupId>org.apache.velocity</groupId>
				<artifactId>velocity-tools</artifactId>
				<version>${velocity-tools.version}</version>
				<exclusions>
					<exclusion>
						<groupId>org.apache.struts</groupId>
						<artifactId>struts-core</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.apache.struts</groupId>
						<artifactId>struts-taglib</artifactId>
					</exclusion>
					<exclusion>
						<groupId>org.apache.struts</groupId>
						<artifactId>struts-tiles</artifactId>
					</exclusion>
					<exclusion>
						<groupId>sslext</groupId>
						<artifactId>sslext</artifactId>
					</exclusion>
				</exclusions>
			</dependency>

			<dependency>
				<groupId>org.apache.zookeeper</groupId>
				<artifactId>zookeeper</artifactId>
				<version>${zookeeper.version}</version>
			</dependency>

			<!-- zookeeper client -->
			<dependency>
				<groupId>com.netflix.curator</groupId>
				<artifactId>curator-framework</artifactId>
				<version>${curator.version}</version>
			</dependency>

			<dependency>
				<groupId>com.github.sgroschupf</groupId>
				<artifactId>zkclient</artifactId>
				<version>${zkclient.version}</version>
			</dependency>

			<!-- GENERAL UTILS begin -->
			<dependency>
				<groupId>org.apache.commons</groupId>
				<artifactId>commons-lang3</artifactId>
				<version>${commons-lang3.version}</version>
			</dependency>

			<!-- TIMER -->
			<dependency>
				<groupId>org.quartz-scheduler</groupId>
				<artifactId>quartz</artifactId>
				<version>${quartz.version}</version>
			</dependency>

			<dependency>
				<groupId>io.netty</groupId>
				<artifactId>netty-all</artifactId>
				<version>${netty.version}</version>
				<scope>compile</scope>
			</dependency>
		</dependencies>
	</dependencyManagement>

	<!-- 插件配置 -->
	<build>
		<pluginManagement>
			<plugins>
				<!-- cobertura 测试覆盖率统计插插件 -->
				<plugin>
					<groupId>org.codehaus.mojo</groupId>
					<artifactId>cobertura-maven-plugin</artifactId>
					<version>2.6</version>
				</plugin>

				<plugin>
					<groupId>org.mortbay.jetty</groupId>
					<artifactId>jetty-maven-plugin</artifactId>
					<version>7.6.14.v20131031</version>
				</plugin>
			</plugins>
		</pluginManagement>
		<plugins>
			<!-- exec java 插件 -->
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>exec-maven-plugin</artifactId>
				<version>1.2.1</version>
			</plugin>

			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<!-- 执行@Category(Smoke.class)的TestCase -->
		<profile>
			<id>run-smoke</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<groups>org.springside.modules.test.category.Smoke</groups>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- 忽略@Category(UnStable.class)的TestCase -->
		<profile>
			<id>skip-unstable</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-surefire-plugin</artifactId>
						<configuration>
							<excludedGroups>org.springside.modules.test.category.UnStable</excludedGroups>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>

		<!-- 执行@Category(UnStable.class)的TestCase -->

	</profiles>
</project>
